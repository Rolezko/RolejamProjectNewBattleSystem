package RolejamNewBattle;import java.net.URL;import java.util.Random;import java.util.ResourceBundle;import java.util.concurrent.Delayed;import javafx.fxml.FXML;import javafx.fxml.Initializable;import javafx.scene.control.Button;import javafx.scene.control.Label;import javafx.scene.control.ProgressBar;import javafx.scene.control.TextArea;import javafx.scene.control.ToggleButton;import javafx.scene.paint.Color;import javafx.scene.text.Font;import javafx.scene.text.FontWeight;import javafx.util.Duration;import javafx.animation.*;public class BattleSceneController implements Initializable {		Hero Hero = new Hero();		Enemy Enemy = new Enemy();		MagicTooltip MagicTip = new MagicTooltip();		     		MainSceneController localMainSceneController;				boolean IsHeroAlive, IsEnemyAlive;			@FXML	Label HPEnemyLabel, AttackPowerEnemyLabel, SpeedEnemyLabel, DefenceEnemyLabel, MagicHeroLabel;	@FXML	Label HPHeroLabel, AttackPowerHeroLabel, SpeedHeroLabel, DefenceHeroLabel, MagicEnemyLabel;	@FXML	Button hReadyB, eReadyB, hSpinAbilityB, eSpinAbilityB;	@FXML	TextArea LogsTA;	@FXML	ProgressBar HPProgressBarHero, HPProgressBarEnemy;	@FXML	ToggleButton hAbilityTg1, hAbilityTg2, hAbilityTg3, eAbilityTg1, eAbilityTg2, eAbilityTg3;			@FXML	public void TheHeroIsReady() {		String local1Ability = checkSelectedAbility(hAbilityTg1);			String local2Ability = checkSelectedAbility(hAbilityTg2);				String local3Ability = checkSelectedAbility(hAbilityTg3);								AbilityActive(local1Ability);				try {					   Thread.sleep(2000);					   // any action					} catch (InterruptedException e) {					   e.printStackTrace();					}				AbilityActive(local2Ability);				try {					   Thread.sleep(2000);					   // any action					} catch (InterruptedException e) {					   e.printStackTrace();					}				AbilityActive(local3Ability);																											}			public void AbilityActive(String Ability) {				switch(Ability){			case("Defence"):								System.out.println("Герой достал щит и блокирует * урона!");								break;							case("Attack"):								System.out.println("Герой достал меч и наносит * урона!");								break;							case("Magic"):						System.out.println("Герой достал Посох и наносит * магического урона!");					break;						}						}			public String checkSelectedAbility(ToggleButton TGAbility) {		return TGAbility.getText();	}		@FXML	public void HeroAbilityTGPressed() {		if(checkIsReadyButtonAllow(hAbilityTg1, hAbilityTg2, hAbilityTg3) == true)		{hReadyB.setDisable(false);}		else {			hReadyB.setDisable(true);		}	}				public boolean checkIsReadyButtonAllow(ToggleButton B1, ToggleButton B2, ToggleButton B3) {		if( (B1.isSelected() == true) && (B2.isSelected() == true) && (B3.isSelected() == true))			return true;		else {			return false;		}	}						public int SpinButtonCounter(Button b, int SpinCount) {		--SpinCount;		b.setText("Spin x" + SpinCount);				return SpinCount;	}		public void CheckSelectedAbility(ToggleButton Tgb, Button WhosSpin) {	if(Tgb.isSelected() == false) {		FadeOutTransition(Tgb, WhosSpin);	}}			@FXML	public void SpinHeroAbilityButton(){		Hero.SpinCount = SpinButtonCounter(hSpinAbilityB, Hero.SpinCount);		CheckSelectedAbility(hAbilityTg1, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg2, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg3, hSpinAbilityB);			}		@FXML	public void SpinEnemyAbilityButton(){				CheckSelectedAbility(eAbilityTg1, eSpinAbilityB);		CheckSelectedAbility(eAbilityTg2, eSpinAbilityB);		CheckSelectedAbility(eAbilityTg3, eSpinAbilityB);	}				public void UpdateAllParam() {				SettingEnemyParam();		SettingHeroParam();	}		public void SettingEnemyParam() {		if(Enemy.CurrentHP <= 0) {    			IsEnemyAlive = false;	}		else {	    HPEnemyLabel.setText(String.valueOf(Enemy.CurrentHP) + "/" + String.valueOf(Enemy.MaxHP));	    HPProgressBarEnemy.setProgress(((double) Enemy.CurrentHP / (double) Enemy.MaxHP));		AttackPowerEnemyLabel.setText(String.valueOf(Enemy.AttackPower));		SpeedEnemyLabel.setText(String.valueOf(Enemy.AttackSpeed));		DefenceEnemyLabel.setText(String.valueOf(Enemy.Defence));					}				IsEnemyAlive = true;	}		public void SettingHeroParam() { 						if(Hero.CurrentHP <= 0) {			HPHeroLabel.setText(String.valueOf(0 + "/" + String.valueOf(Hero.MaxHP)));			HPProgressBarHero.setProgress((0));						IsHeroAlive = false;					}		else {		HPHeroLabel.setText(String.valueOf(Hero.CurrentHP) + "/" + String.valueOf(Hero.MaxHP));		HPProgressBarHero.setProgress(((double) Hero.CurrentHP / (double) Hero.MaxHP));		AttackPowerHeroLabel.setText(String.valueOf(Hero.AttackPower));		SpeedHeroLabel.setText(String.valueOf(Hero.AttackSpeed));		DefenceHeroLabel.setText(String.valueOf(Hero.Defence));		MagicHeroLabel.setText(Hero.SelectedMagic);		MagicHeroLabel.setTooltip(MagicTip.getMagicToolTipInfo(MagicHeroLabel.getText(), MagicTip.BattleMagicTip));				IsHeroAlive = true;								}			}			public void FadeOutTransition(ToggleButton TgB, Button WhosSpin) {				FadeTransition Fd = new FadeTransition();		Fd.setNode(TgB);		if(TgB.getOpacity() == 0) {			Fd.setFromValue(0);			Fd.setDuration(Duration.millis(500));		}		else {			Fd.setFromValue(1);			Fd.setDuration(Duration.seconds(1));					}				Fd.setToValue(0);				Fd.setCycleCount(1);		Fd.setAutoReverse(false);		Fd.setOnFinished(Event1 -> 		{	FadeInTransition(TgB, WhosSpin);});					Fd.play();		WhosSpin.setDisable(true);	}			public void FadeInTransition(ToggleButton TgB, Button WhosSpin) {		ChangeTypeOfAbility(TgB);		FadeTransition Fd = new FadeTransition();		Fd.setNode(TgB);		Fd.setFromValue(0);		Fd.setToValue(1);		Fd.setDuration(Duration.seconds(1));		Fd.setCycleCount(1);		Fd.setAutoReverse(false);	if(WhosSpin.getText().equals("Spin x0")) {		Fd.setOnFinished(Event1 -> {WhosSpin.setDisable(true);});	}				else {		Fd.setOnFinished(Event1 -> {WhosSpin.setDisable(false);});	}				Fd.play();	}								@Override	public void initialize(URL arg0, ResourceBundle arg1) {		CheckSelectedAbility(hAbilityTg1, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg2, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg3, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg1, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg2, hSpinAbilityB);		CheckSelectedAbility(hAbilityTg3, hSpinAbilityB);		hSpinAbilityB.setText("Spin x" + Hero.SpinCount);			// TODO Auto-generated method stub			}		public void GetHeroInfoFromBattleScene() {		localMainSceneController.SetHeroInfoFromBattleScene(Hero);		localMainSceneController.UpdateHeroStat();	}		public void SetMainController(MainSceneController localMainSceneController) {		this.localMainSceneController = localMainSceneController;			}					public void ChangeTypeOfAbility(ToggleButton Tgb) {		String[] texts = {"Attack", "Defence", "Magic"};		Random random = new Random ();		int pos = random.nextInt(texts.length);						switch(texts[pos]){		case("Attack"):			Tgb.setTextFill(Color.RED);		break;		case("Defence"):			Tgb.setTextFill(Color.BROWN);		break;		case("Magic"):			Tgb.setTextFill(Color.BLUE);  		break;					}				Tgb.setFont(Font.font ("Verdana", FontWeight.BOLD, 15));						Tgb.setText(texts[pos]);			}												}